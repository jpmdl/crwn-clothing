{"ast":null,"code":"import ShopActionTypes from \"./shop.types\";\nimport { firestore, convertCollectionsSnapshotToMap } from \"../../firebase/firebase.utils\";\nexport const fetchCollectionsStart = () => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_START\n});\nexport const fetchCollectionsSuccess = collectionsMap => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_SUCCESS,\n  payload: collectionsMap\n});\nexport const fetchCollectionsFailure = errorMessage => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_FAILURE,\n  payload: errorMessage\n});\nexport const fetchCollectionsStartAsync = () => {\n  return dispatch => {\n    const collectionRef = firestore.collection(\"collections\"); // as soon as firestore starts the collection get,\n    // we instatiate fetchCollectionsStart action that sets isFetching to true\n\n    dispatch(fetchCollectionsStart()); // ** Observable pattern **\n    // this.unsubscribeFromSnapshot = collectionRef.onSnapshot(async snapshot => {\n    //   const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n    //   dispatch(fetchCollectionsSuccess(collectionsMap));\n    // });\n    // ** Promise pattern **\n\n    collectionRef.get().then(snapshot => {\n      const collectionsMap = convertCollectionsSnapshotToMap(snapshot); // as soon as firestore returns data,\n      // we instatiate fetchCollectionsSuccess action that sets isFetching to false and sets collections\n\n      dispatch(fetchCollectionsSuccess(collectionsMap));\n    }).catch(error => dispatch(fetchCollectionFailure(error.message))); // ** API calls **\n    // fetch('https://firestore.googleapis.com/v1/projects/crwn-db-aeff9/databases/(default)/documents/collections')\n    // .then(res => res.json())\n    // .then(collections => console.log)\n  };\n}; // we can return functions on actions because of 'redux-thunk'.\n// if 'redux-thunk' middleware is enabled, any time we attempt\n// to 'dispatch' a function instead of an object, the middleware,\n// will call that function with 'dispatch' method itself as the\n// first argument.","map":{"version":3,"sources":["/Users/jploureiro/Documents/local/udemy/reactjs-and-redux/crwn-clothing/src/redux/shop/shop.actions.js"],"names":["ShopActionTypes","firestore","convertCollectionsSnapshotToMap","fetchCollectionsStart","type","FETCH_COLLECTIONS_START","fetchCollectionsSuccess","collectionsMap","FETCH_COLLECTIONS_SUCCESS","payload","fetchCollectionsFailure","errorMessage","FETCH_COLLECTIONS_FAILURE","fetchCollectionsStartAsync","dispatch","collectionRef","collection","get","then","snapshot","catch","error","fetchCollectionFailure","message"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,cAA5B;AAEA,SACEC,SADF,EAEEC,+BAFF,QAGO,+BAHP;AAKA,OAAO,MAAMC,qBAAqB,GAAG,OAAO;AAC1CC,EAAAA,IAAI,EAAEJ,eAAe,CAACK;AADoB,CAAP,CAA9B;AAIP,OAAO,MAAMC,uBAAuB,GAAGC,cAAc,KAAK;AACxDH,EAAAA,IAAI,EAAEJ,eAAe,CAACQ,yBADkC;AAExDC,EAAAA,OAAO,EAAEF;AAF+C,CAAL,CAA9C;AAKP,OAAO,MAAMG,uBAAuB,GAAGC,YAAY,KAAK;AACtDP,EAAAA,IAAI,EAAEJ,eAAe,CAACY,yBADgC;AAEtDH,EAAAA,OAAO,EAAEE;AAF6C,CAAL,CAA5C;AAKP,OAAO,MAAME,0BAA0B,GAAG,MAAM;AAC9C,SAAOC,QAAQ,IAAI;AACjB,UAAMC,aAAa,GAAGd,SAAS,CAACe,UAAV,CAAqB,aAArB,CAAtB,CADiB,CAEjB;AACA;;AACAF,IAAAA,QAAQ,CAACX,qBAAqB,EAAtB,CAAR,CAJiB,CAMjB;AACA;AACA;AACA;AACA;AAEA;;AACAY,IAAAA,aAAa,CACVE,GADH,GAEGC,IAFH,CAEQC,QAAQ,IAAI;AAChB,YAAMZ,cAAc,GAAGL,+BAA+B,CAACiB,QAAD,CAAtD,CADgB,CAEhB;AACA;;AACAL,MAAAA,QAAQ,CAACR,uBAAuB,CAACC,cAAD,CAAxB,CAAR;AACD,KAPH,EAQGa,KARH,CAQSC,KAAK,IAAIP,QAAQ,CAACQ,sBAAsB,CAACD,KAAK,CAACE,OAAP,CAAvB,CAR1B,EAbiB,CAuBjB;AACA;AACA;AACA;AACD,GA3BD;AA4BD,CA7BM,C,CA+BP;AACA;AACA;AACA;AACA","sourcesContent":["import ShopActionTypes from \"./shop.types\";\n\nimport {\n  firestore,\n  convertCollectionsSnapshotToMap\n} from \"../../firebase/firebase.utils\";\n\nexport const fetchCollectionsStart = () => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_START\n});\n\nexport const fetchCollectionsSuccess = collectionsMap => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_SUCCESS,\n  payload: collectionsMap\n});\n\nexport const fetchCollectionsFailure = errorMessage => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_FAILURE,\n  payload: errorMessage\n});\n\nexport const fetchCollectionsStartAsync = () => {\n  return dispatch => {\n    const collectionRef = firestore.collection(\"collections\");\n    // as soon as firestore starts the collection get,\n    // we instatiate fetchCollectionsStart action that sets isFetching to true\n    dispatch(fetchCollectionsStart());\n\n    // ** Observable pattern **\n    // this.unsubscribeFromSnapshot = collectionRef.onSnapshot(async snapshot => {\n    //   const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n    //   dispatch(fetchCollectionsSuccess(collectionsMap));\n    // });\n\n    // ** Promise pattern **\n    collectionRef\n      .get()\n      .then(snapshot => {\n        const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n        // as soon as firestore returns data,\n        // we instatiate fetchCollectionsSuccess action that sets isFetching to false and sets collections\n        dispatch(fetchCollectionsSuccess(collectionsMap));\n      })\n      .catch(error => dispatch(fetchCollectionFailure(error.message)));\n\n    // ** API calls **\n    // fetch('https://firestore.googleapis.com/v1/projects/crwn-db-aeff9/databases/(default)/documents/collections')\n    // .then(res => res.json())\n    // .then(collections => console.log)\n  };\n};\n\n// we can return functions on actions because of 'redux-thunk'.\n// if 'redux-thunk' middleware is enabled, any time we attempt\n// to 'dispatch' a function instead of an object, the middleware,\n// will call that function with 'dispatch' method itself as the\n// first argument.\n"]},"metadata":{},"sourceType":"module"}